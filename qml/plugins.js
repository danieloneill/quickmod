
function writeLoadOrder(plugins)
{
    let written = [];

    let output = ["# Generated by Quickmod"];
    plugins.forEach( function(ent) {
        if( ent['enabled'] )
        {
            if( !written.includes(ent['filename']) )
                output.push(`${ent['filename']}`);
            written.push(ent['filename']);
        }
    } );
    const res = output.join("\r\n");
    //console.log("Writing: "+res);

    let sobj = gameSettings.objFor(currentGame);
    const adroot = `${sobj.userDataPath}/${currentGameEntry['appdir']}`;
    const lopath = `${adroot}/${currentGameEntry['loadorder']}`;
    File.write(lopath, res);

    return res;
}

let pluginCache = {};
function readPlugins()
{
    let sobj = gameSettings.objFor(currentGame);
    const adroot = `${sobj.userDataPath}/${currentGameEntry['appdir']}`;
    const pluginspath = `${adroot}/${currentGameEntry['plugins']}`;
    const raw = ''+File.read(pluginspath);
    //console.log(`Reading "${pluginspath}": ${raw}`);

    const lines = raw.split('\n');
    //console.log(`Lines: ${JSON.stringify(lines,null,0)}`);

    let register = {};

    let plugins = [];
    for( let a=0; a < lines.length; a++ )
    {
        const l = lines[a].trim();
        if( l.length < 4 )
            continue;

        if( l.substring(0,1) === '#' )
            continue;

        let nent = { 'enabled':false, 'filename':l };
        if( l.substring(0,1) === '*' )
        {
            nent['enabled'] = true;
            nent['filename'] = l.substring(1);
        }

        const llc = nent['filename'].toLowerCase();

        if( register[llc] )
            continue;
        register[llc] = true;

        plugins.push(nent);
    }

    plugins = scanForLoose(plugins);

    plugins = updatePluginCache(plugins);

    delete register;
    let inorder = [];
    plugins.forEach( function(ent) {
        const lcfname = ent['filename'].toLowerCase();

        inorder.push(lcfname);

        if( ent['plugin'] )
        {
            if( ent['plugin']['masters'] )
            {
                ent['plugin']['masters'].forEach( function(m) {
                    const lcm = m.toLowerCase();
                    if( !inorder.includes(lcm) )
                    {
                        console.log(`Can't find ${lcm} in ${JSON.stringify(inorder)}`);
                        if( !ent['missing'] )
                            ent['missing'] = [ m ];
                        else
                            ent['missing'].push(m);
                    }
                } );
            }

            if( ent['plugin']['description'] )
                ent['description'] = ent['plugin']['description'];
        }

        //console.log(`${ent['filename']}: ${JSON.stringify(ent['plugin'],null,2)}`);
    } );

    updatePluginsTable(plugins);

    //console.log(`Plugins: ${JSON.stringify(plugins,null,2)}`);
    return plugins;
}

function updatePluginCache(plugins)
{
    let sobj = gameSettings.objFor(currentGame);
    plugins.forEach( function(ent) {
        // Read plugin info:
        const pluginPath = `${sobj.gamePath}/${currentGameEntry['datadir']}/${ent['filename']}`;
        if( !pluginCache[pluginPath] )
        {
            let info = ModReader.readSkyrimMod(pluginPath);
            if( info )
            {
                ent["plugin"] = info;
                pluginCache[pluginPath] = info;
            }
        } else
            ent['plugin'] = pluginCache[pluginPath];

        //console.log(pluginPath+": "+JSON.stringify(info,null,2));
    } );
    return plugins;
}

function writePlugins(plugins)
{
    let written = [];

    let output = ["# Generated by Quickmod"];
    plugins.forEach( function(ent) {
        if( !written.includes(ent['filename']) )
            output.push(`${ ent['enabled'] ? '*' : '' }${ent['filename']}`);
        written.push(ent['filename']);
    } );
    const res = output.join("\r\n");
    //console.log("Writing: "+res);

    let sobj = gameSettings.objFor(currentGame);
    const adroot = `${sobj.userDataPath}/${currentGameEntry['appdir']}`;
    const pluginspath = `${adroot}/${currentGameEntry['plugins']}`;
    File.write(pluginspath, res);

    readPlugins();

    return res;
}

function scanForLoose(plugins)
{
    let sobj = gameSettings.objFor(currentGame);
    const path = `${sobj.gamePath}/${currentGameEntry['datadir']}`;
    const contents = File.dirContents(path);
    if( !contents )
        return plugins; // ... weird?

    // Don't add files that belong to a mod:
    const justFiles = db.getFilesEndingWith(['.esm', '.esl', '.esp']).map( e => e['dest'].toLowerCase() );

    const modsLC = plugins.map( e => e['filename'].toLowerCase() );

    for( let x=0; x < contents.length; x++ )
    {
        const ent = contents[x];
        const lcfn = ent['fileName'].toLowerCase();
        if( justFiles.includes(lcfn) )
            continue;

        if( lcfn.endsWith('.esl') || lcfn.endsWith('.esp') || lcfn.endsWith('.esm') )
        {
            if( !modsLC.includes(lcfn) )
            {
                // ...append them.
                let nent = { 'enabled':false, 'filename':ent['fileName'] };
                plugins.push(nent);
                modsLC.push(lcfn);
            }
        }
    }

    return plugins;
}

function disableMod(mod)
{
    let plugins = readPlugins();
    plugins.forEach( function(ent) {
        //console.log(`Comp: ${ent['filename']} => ${mod['filename']}`);
        if( ent['filename'] === mod['filename'] )
            ent['enabled'] = false;
    } );
    writePlugins(plugins);
    updatePluginsTable(plugins);
}

function enableMod(mod)
{
    let plugins = readPlugins();
    plugins.forEach( function(ent) {
        //console.log(`enableMod: ${ent['filename']} vs ${mod['filename']}`);
        if( ent['filename'] === mod['filename'] )
            ent['enabled'] = true;
    } );
    writePlugins(plugins);
    updatePluginsTable(plugins);
}

function updatePluginsTable(plugins)
{
    // Let's get hairy...
    let mods = db.getMods();
    let files = {};
    mods.forEach( function(mod) {
        files[mod['modId']] = db.getFiles(mod['modId']);
    } );

    let model = [];
    plugins.forEach( function(ent) {
        let nent = { 'enabled':ent['enabled'], 'filename':ent['filename'], 'name':'???', 'description':'???' };

        if( ent['description'] )
            nent['description'] = ent['description'];

        if( ent['missing'] )
            nent['missing'] = ent['missing'];

        if( !ent['plugin'] )
            nent['notfound'] = true;

        let done = false;
        for( let a=0; a < mods.length && !done; a++ )
        {
            const mod = mods[a];
            const fent = files[mod['modId']];
            for( let b=0; b < fent.length && !done; b++ )
            {
                const f = fent[b];
                if( f['dest'].endsWith(ent['filename']) )
                {
                    nent['name'] = mod['name'];
                    nent['description'] = mod['description'];
                    done = true;
                }
            }
        }

        model.push(nent);
    } );

    pluginsTable.setModel(model);
}
